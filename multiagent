# -*- coding: utf-8 -*-
"""multi-agents-system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dq0E4AILj-uJyeZ_llYQEkbaKBaFL3An
"""

from google.colab import userdata
GEMINI_API_KEY=userdata.get('GIMINI_API_KEY')

!pip install openai-agents # or `uv add openai-agents`, etc

!pip install --upgrade openai

from agents import OpenAIChatCompletionsModel, RunConfig, Runner, Agent

from agents import AsyncOpenAI

external_client = AsyncOpenAI(
    api_key=("AIzaSyB9mWAo9S4JKyZcwevDxOuor_Dhfelp8Cg"),
    base_url="https://generativelanguage.googleapis.com/v1beta/openai/"
)

model = OpenAIChatCompletionsModel(
    model = "gemini-2.0-flash",
    openai_client = external_client
)

config = RunConfig(
    model = model,
    model_provider = external_client,
    tracing_disabled = True
)

# prompt: IMPORT NEST ASYNIO AND APPL

!pip install nest_asyncio
import nest_asyncio
nest_asyncio.apply()

!pip install tavily-python

from tavily import TavilyClient

from agents import function_tool

@function_tool
def tavily_search(query: str, max_results: int = 5):
    """
    Perform a Tavily search for the given query.

    Args:
        query (str): The search query text.
        max_results (int): Maximum number of results to return. Default is 5.

    Returns:
        dict: Search results returned by Tavily API.
    """
    try:
        response = tavily_client.search(query, max_results=max_results)
        return response
    except Exception as e:
        return {"error": str(e)}

agent1: Agent = Agent(name="Assistant1",tools=[tavily_search], instructions="Divide the EV research into 4 tasks: (1) data collection, (2) policy analysis, (3) market analysis, (4) final report. Route each task to the correct agent. Ensure results are Pakistan-specific, post-2020, and always cite sources.", model=model)

agent2: Agent = Agent(name="Assistant2",tools=[tavily_search], instructions="Find Pakistan-specific EV sources (Govt of Pakistan, NEPRA, ECC, SBP, OEMs, think-tanks, and reliable news). Return title, URL, date, publisher, and short summary.", model=model)

agent3: Agent = Agent(name="Assistant3", tools=[tavily_search],instructions="Extract key EV policies, incentives, duties, and SROs. Present in a table with: Policy Name, Incentive/Tax/Duty, Effective Date, Vehicle Category (2/3/4-wheeler), and Source URL.", model=model)

agent4: Agent = Agent(name="Assistant4", instructions="Summarize Pakistanâ€™s EV market status: current adoption, major brands, 2/3/4-wheeler trends, cost comparison with petrol vehicles, charging infrastructure, and future growth scenarios. Provide at least one numerical estimate (e.g., EV penetration % or market size) with citation", model=model)

agent5: Agent = Agent(name="Assistant5", instructions="Write a structured report on the scope of EVs in Pakistan. Sections: Executive Summary, Market Overview, Policy & Incentives, Competitors & Ecosystem, Challenges, Future Outlook. Use simple language, short paragraphs, and cite all facts", model=model)

from agents import ItemHelpers, set_tracing_export_api_key

import os

from google.colab import userdata
OPENAI_API_KEY=userdata.get("OPENAI-API-KEY")

set_tracing_export_api_key(OPENAI_API_KEY)

import asyncio

res=Runner.run_sync(agent1, input="Electric Vihicals research", run_config=config)

from agents import trace

async def main():
   # msg = input("Hi! Enter a message, and we'll translate it to Spanish.\n\n")

    # Ensure the entire workflow is a single trace
    with trace("multiagents"):
        res=Runner.run_sync(agent1, input="Electric Vihicals research", run_config=config)
        res_1, res_2, res_3 = await asyncio.gather(
            Runner.run(
                agent2,
                ItemHelpers.text_message_outputs(res.new_items)[0],
            ),
            Runner.run(
                agent3,
                ItemHelpers.text_message_outputs(res.new_items)[0],
            ),
            Runner.run(
                agent4,
                ItemHelpers.text_message_outputs(res.new_items)[0],
            ),
        )
        outputs = [
            ItemHelpers.text_message_outputs(res_1.new_items),
            ItemHelpers.text_message_outputs(res_2.new_items),
            ItemHelpers.text_message_outputs(res_3.new_items),
        ]

        comb_res = "\n\n".join(outputs)
        print(f"\n\ncomb_res:\n\n{comb_res}")

        final_res = await Runner.run(
            agent5,
            f"Input: \n{comb_res}\nres:\n{comb_res}",
        )

    print("\n\n-----")

    print(f"Best translation: {final_res.final_output}")


if __name__ == "__main__":
    asyncio.run(main())

!pip install "openai-agents[viz]"

from agents.extensions.visualization import draw_graph

draw_graph(agent1)
